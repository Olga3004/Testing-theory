1. Что подразумевается под тестовой средой?
Это комбинация аппаратной и программной среды, в которой будут выполняться тесты.
Включает в себя конфигурацию оборудования, настройки операционной системы, 
конфигурацию программного обеспечения, тестовые терминалы и другую поддержку для выполнения теста.
Это наиболее важный аспект процесса тестирования. Недоступность или неправильная настройка среды могут разрушить все усилия по тестированию.
Практически, команда тестировщиков не может начать реальную работу, не имея подходящей среды для тестирования.

2. В чем отличие build от release?
Build - это версия ПО, которую команда разработчиков передает команде тестирования для целей тестирования.
Release - это программное обеспечение, которое команда тестирования передает клиенту.
Релиз является окончательным приложением после завершения разработки и тестирования.
После тестирования сборки группа тестирования сертифицирует это ПО и доставляет его заказчику. 
Релиз основан на сборках и может иметь несколько сборок. Таким образом, это ПО доставляется заказчику после завершения этапов разработки и тестирования.
   
3. Основные фазы тестирования?
Основные фазы:
1. Анализ требований.
2. Планироание испытаний.
3. Проектирование тестов.
4. Запуск тестов.
5. Редактирование тестов.
6. Системное тестирование.
7. Приемочное тестирование.
8. Поддержка и сопроваждение.

1. Анализ требований.
- Изучение спецификации требований;
- Изучение функциональные требования;
Отвечаем:
- что нам предстоит тестировать;
- объем работы;
- нюансы.
По полученным данным составляем план тестирования.
2. Планирование испытаний.
Определяем объем испытаний и ресурсов. 
Пишем, когда мы будем выполнять намеченные действия.
3. Проектирование тестов.
Определяем:
- цель тестирования;
- специфику полученных данных;
- модули и подмодули приложения;
- архитектуру проверок ( группы чек -листов);
- архитектуру тестов (детелизацию от крупного к деталям).
Пишем тесты.
4. Запуск тестов. 
- наблюдаем за тестами в действии;
- анализируем полученные результаты.
5. Редактирование тестов.
- пересматриваем и исправляем тесты;
- оставляем тесты в актуальном состоянии;
- дополняем новыми тестами.
6. Системное тестирование.
- тестируем всю систему;
получаем сведения о качестве ПО.
7. Приемочное тестирование.
Альфа-тестирование - используем незавершенную версию продукта в, которой реализована не вся функциональность
с целью выявления ошибок в реализованных модулях и функций для их последующего устранения.
Бета-тестирование - это интенсивное использование почти законченного продукта 
фокус-группами для того, чтобы найти максимальное кол-во ошибок и устранить их перед релизом, перед тем , как он выйдет на рынок.
8. Поддержка и сопровождение.
- тестирование багов найденных в релизном продукте.
- регриссионное тестирование билда после внесенных исправлений.

4. Что такое импакт анализ?
Импакт анализ - это исследование, которое позволяет указать затронутые места в проекте при разработке новой или изменении старой функциональности, 
а также определить, насколько значительно они были затронуты.Затронутые области требуют большего внимания во время проведения регрессионного тестирования.
Импакт анализ может быть полезным в следующих случаях:
- есть изменения в требованиях;
- получен запрос на внесение изменений в продукт;
- ожидается внедрение нового модуля или функциональности в существующий продукт;
- каждый раз, когда есть изменения в существующих модулях или функциональностях продукта.

5. Критерии выбора тестов?
Классы тестов:
1. Структурные критерии используют информацию о структуре программы;
2. Функциональные критерии формулируются в описании требований к продукту.

6. Принципы тестирования?
Принцыпы тестирования:
1. Тестирование демонстрирует (только) наличие дефектов.
Тестирование может показать наличие дефектов в программе, но не доказать их отсутствие. 
Тем не менее, важно составлять тест-кейсы, которые будут находить как можно больше багов. 
Таким образом, при должном тестовом покрытии, тестирование позволяет снизить вероятность наличия дефектов
в программном обеспечении. В то же время, даже если дефекты не были найдены в процессе тестирования, 
нельзя утверждать, что их нет;
2. Исчерпывающее тестирование недостижимо.
Невозможно провести исчерпывающее тестирование, которое бы покрывало все комбинации пользовательского ввода
и состояний системы, за исключениям совсем уж примитивных случаев. Вместо этого необходимо использовать анализ
рисков и расстановку приоритетов, что позволит более эффективно распределять усилия по обеспечению качества ПО.
3. Раннее тестирование (экономит время и деньги).
Тестирование должно начинаться как можно раньше в жизненном цикле разработки программного обеспечения, 
и его усилия  должны быть сконцентрированы на определенных целях.
4. Принцип скопления дефектов.
Разные модули системы могут содержать разное количество дефектов – то есть, плотность скопления дефектов 
в разных элементах программы может отличаться. Усилия по тестированию должны распределяться пропорционально 
фактической плотности дефектов. В основном, большую часть критических дефектов находят в ограниченном количестве модулей.
Это проявление принципа Парето: 80% проблем содержатся в 20% модулей.
5. Парадокс пестицида.
Прогоняя одни и те же тесты вновь и вновь, Вы столкнетесь с тем, что они находят все меньше новых ошибок. 
Поскольку система эволюционирует, многие из ранее найденных дефектов исправляют и старые тест-кейсы больше не срабатывают.
Чтобы преодолеть этот парадокс, необходимо периодически вносить изменения в используемые наборы тестов, рецензировать 
и корректировать их с тем, чтобы они отвечали новому состоянию системы и позволяли находить как можно большее количество дефектов.
6. Тестирование зависит от контекста.
Выбор методологии, техники и типа тестирования будет напрямую зависеть от природы самой программы. 
Например, программное обеспечение для медицинских нужд требует гораздо более строгой и тщательной проверки, 
чем, скажем, компьютерная игра. Из тех же соображений, сайт с большой посещаемостью должен пройти через серьезное 
тестирование производительности, чтобы показать возможность работы в условиях высокой нагрузки.
7. Заблуждение об отсутствии ошибок.
Тот факт, что тестирование не обнаружило дефектов, еще не значит, что программа готова к релизу.
Нахождение и исправление дефектов будут не важны, если система окажется неудобной в использовании,
и не будет удовлетворять ожиданиям и потребностям пользователя.

7. Что такое независимое тестирование?
Независимое тестирование соответствует независимой команде, которая участвует в тестировании, 
отличном от разработчика, чтобы избежать предвзятости автора и часто более эффективна в поиске дефектов и сбоев.
Независимое тестирование является частью процесса разработки ПО и часто позволяет определить дефекты еще на ранней 
стадии разработки, что,дает возможность своевременно их устранить. Такой вид тестирования 
можно проводить не только в момент разработки. Можно так же тестировать готовый продукт, для того, чтобы получить 
независимую оценку его качества.


8. Что такое тестирование со сдвигом влево?
9. Почему тестирование делится на отдельные этапы?

10. Какие есть этапы тестирования?
1. Работа с требованиями. Знакомство с требованиями заказчика, что должен из себя представлять итоговый продукт, обсуждение.
2. Разработка стратегии тестирования. Оценка сроков тестирования, выявление среды тестирования, объединение всей информации, 
полученной при работе с требованиями.
3. Создание тестовой документации. Написание сценариев, которые позволят проверить функционал.
4. Тестирование прототипа. Тестирование основного функционала продукта, корректировка целей, добавление фичей.
5. Основное тестирование. Выполнение общей проверки продукта.
6. Стабилизация. На данном этапе происходит работа над устранением багов.
7. Эксплуатация. Проводится регресс-тестирование, устранение ошибок, которые нашел конечный пользователь.

11. Как вы тестируете продукт, если требования еще не зафиксированы?
В этой ситуации нужно искать другие источники или оракулы. Креативность тут большое подспорье, нужно выходить из зоны комфорта.
Иногда я могу сравнить наш продукт с похожими.
Нужно ответить на вопросы:
Как работали предыдущие версии?
Какой имидж компания старается донести до пользователей?
Как работают похожие продукты?
Что говорят о продукте важные лица?
Хотят ли пользователи такого поведения от этой фичи?
Соответствует ли поведение продукта другим его функциям?
Соответствует ли поведение фичи ее предназначению?
Соответствует ли продукт законодательству и другим источникам права?
Также можем устроить мозговой штурм для генерации идей для тестирования в группе, или совместно заняться исследовательским тестированием.


12. Как вы узнаете, было ли создано достаточно тестов для тестирования продукта?
- Если все требования были учтены;
- Если обнаружено ожидаемое число дефектов;
- Все дефекты, относящиеся к классу Show Stopper или Blocker, устранены, ни у одного из критических дефектов нет статуса «открытый».
- Все дефекты с высоким приоритетом идентифицированы и исправлены.
- Небольшое число дефектов среднего уровня критичности «открыты», их разбор проведен.
- Число «открытых» дефектов среднего уровня, которые не влияют на пользование системой,небольшое.
- Все дефекты с высоким уровнем приоритета закрыты и соответствующие регрессивные сценарии успешно проведены.
Охват теста:
Охват теста должен быть на уровне 95%.
Pass Rate текст-кейса также должен быть 95%. Для расчета этого процентного соотношения применяется формула:
(Общее число успешных текст-кейсов / общее число тест-кейсов ) * 100.
Все критически важные тест-кейсы оказались успешными
5% тест-кейсов могут быть провалены, но это относится к низкоприоритетным кейсам.
Достигнуто полное покрытие функционала.
Все крупные функциональные дефекты успешно устранены.

13. Что подразумевается под тестовыми данными? 
Тестовые данные — это данные, которые используются для выполнения тестов на тестовом программном обеспечении.
Данные испытаний должны быть точными и исчерпывающими для выявления дефектов.

14. Что такое бета-тестирование?
Бета-тестирование (beta testing) – интенсивное использование почти готовой версии продукта с целью выявления максимального 
числа ошибок в его работе для их последующего устранения перед окончательным выходом (релизом) продукта на рынок, к массовому 
потребителю. Бета-тестирование представляет собой реально работающую версию программы с полным функционалом.

15. Что означает пилотное тестирование? (Pilot)
Пилотное тестирование — это своего рода репетиция, позволяющая проверить исследовательский подход на небольшом количестве участников. 

16. Что такое бизнес – логика?
17. Какие существуют основные виды тестирования ПО?


18. Методы тестирования?
 1. Метод "Чёрного ящика" (Black box testing). При тестировании чёрного ящика, тестировщик имеет доступ к ПО только через те же интерфейсы, что и заказчик или пользователь,
либо через внешние интерфейсы, позволяющие другому компьютеру либо другому процессу подключиться к системе для тестирования. Например, тестирующий модуль может виртуально
нажимать клавиши или кнопки мыши в тестируемой программе с помощью механизма взаимодействия процессов, с уверенностью в том, все ли идет правильно, что эти события вызывают 
тот же отклик, что и реальные нажатия клавиш и кнопок мыши.
 2. Метод "Белого ящика" (White box or «glass-box» testing). При тестировании белого ящика, разработчик теста имеет доступ к исходному коду и может 
писать код, который связан с библиотеками тестируемого ПО. Это типично для юнит-тестирования , при котором тестируются только отдельные части системы.
Оно обеспечивает то, что компоненты конструкции - работоспособны и устойчивы, до определенной степени.
 3. Метод "Серого ящика" (Grey box). Тестирование методом серого ящика или Gray box тестирование, это что-то среднее между White Box и Black Box 
тестированием, где тестер обладает лишь общими знаниями данного продукта, необходимыми для выполнения теста. Эта проверка осуществляется посредством 
документации и схемы информационных потоков. Тестирование проводится конечным пользователем, или пользователям, которые представляются как конечные


19. Что такое пирамида / уровни тестирования?
Пирамида тестирования — один из способов обеспечения качества ПО, визуализация, которая помогает группировать тесты по типу их назначения. 
Так же, позволяет согласовать правила написания тестов, разделения их на типы.
Из этой пирамиды главное запомнить два принципа:
1. Писать тесты разной детализации.
2. Чем выше уровень, тем меньше тестов.
Придерживайтесь формы пирамиды, чтобы придумать здоровый, быстрый и поддерживаемый набор тестов.
-Написать много маленьких и быстрых юнит-тестов.
-Написать несколько более общих тестов
- и совсем мало высокоуровневых сквозных тестов, которые проверяют приложение от начала до конца.
Подробнее о Классической пирамиде тестирования:
1. Модульные тесты должны составлять основную часть автоматизированного тестирования.
2. Интеграционные тесты должны занимать середину пирамиды.Тестируя за пределами пользовательского интерфейса, 
вы можете тестировать входы и выходы API или сервисов без всех сложностей, которые вводит пользовательский интерфейс;
Эти тесты медленнее и сложнее, чем модульные тесты, потому что им может потребоваться доступ к базе данных или другим компонентам.
3. Тесты пользовательского интерфейса должны размещаться на вершине пирамиды.
Большая часть вашего кода и бизнес-логики должна быть уже протестирована до этого уровня;
Тесты интерфейса пишутся, чтобы убедиться, что сам интерфейс работает правильно;
Тесты пользовательского интерфейса медленнее и тяжелее в написании и поддержке, поэтому необходимо сводить их к минимуму.


20. Что такое деструктивное/разрушающее/негативное тестирование? (DT — Destructive testing)
Деструктивное тестирование — это метод тестирования, при котором приложение выполняется неконтролируемым образом, чтобы проверить
работоспособность приложения, а также найти точку отказа.
Негативное тестирование – это процесс проверки на некорректное поведение. В ходе такого тестирования мы можем узнать, что система 
справится с непредвиденными ситуациями.

21. Что такое недеструктивное/неразрушающее/позитивное тестирование? (NDT – Non Destructive testing)
Позитивное тестирование – это процесс проверки на корректное поведение согласно техническим требованиям и документации.
Позитивное тестирование выполняется для обеспечения того, что система делает именно то, что ожидается.

22. Что подразумевается под компонентным/модульным/юнит тестированием? (Component/Module/Unit testing)
Компонентное (модульное) тестирование проверяет функциональность и ищет дефекты в частях приложения, которые доступны и могут быть 
протестированы по-отдельности (модули программ, объекты, классы, функции и т.д.). Обычно компонентное (модульное) тестирование проводится 
вызывая код, который необходимо проверить и при поддержке сред разработки, таких как фреймворки (frameworks - каркасы) для модульного 
тестирования или инструменты для отладки. Все найденные дефекты, как правило исправляются в коде без формального их описания в баг трекинговой системе. 
Модульное тестирование - это насколько возможно подробное тестирование одного компонента (изолированно).


23. Что подразумевается под интеграционным тестированием?
Интеграционное тестирование - это тип тестирования, при котором программные модули объединяются логически и тестируются как группа. 
Как правило, программный продукт состоит из нескольких программных модулей, написанных разными программистами. Целью нашего тестирования 
является выявление багов при взаимодействии между этими программными модулями и в первую очередь направлен на проверку обмена данными между этими самими модулями.

24. Разница между Unit testing и Integration testing?
Модульные тесты не должны зависеть от внешних систем. Они проверяют внутреннюю согласованность, а не доказывают, что они хорошо играют с какой-то внешней системой.
Интеграционный тест делается для демонстрации того, что разные части системы работают вместе. Интеграционные тесты могут охватывать целые приложения, и для их создания 
требуется гораздо больше усилий. Для них обычно требуются ресурсы, такие как экземпляры базы данных и аппаратное обеспечение.

25. Что такое системное интеграционное тестирование? (SIT — System Integration testing) 
Проверяется взаимодействие между разными системами после проведения системного тестирования.

26. В чем разница между тест-драйвером и тест-заглушкой? (Test Driver and Test Stub)
Драйвер вызывает функции тестируемого модуля, заглушки имитируют поведение остальных частей системы 

27. Что подразумевается под системным тестированием?
Системные тесты направлены на тестирование всей программы в целом, с учётом окружения, в которой программе предстоит работать. Это уточнение очень важное, ведь программа 
редко когда может работать "сама по себе". Программа работает на одном или нескольких (в случае распределенных приложений) конкретных компьютерах.
И на разных компьютерах (в разных условиях) тестируемая программа может повести себя по-разному. Например, клиент-серверное приложение может работать замечательно 
в обычной сети, но при этом может оказаться неработоспособным при наличии между клиентом и сервером маршрутизатора с настроенным NAT.
Такой вид тестов является самым дорогим, самым сложным и самым трудноавматизируемым видом тестов. Зачастую системные тесты настолько сложно автоматизировать, что их и вовсе 
прогоняют вручную, что ещё больше увеличивает их стоимость. При этом этот вид тестов обладает одним неоспоримым и важнейшим преимуществом: это тестирование программы
в том виде, в котором её увидит пользователь. Больше того, системные тесты позволяют даже воспроизвести условия различных пользователей, чтобы убедиться, что у всех пользователей 
всё работает хорошо.

28. Что такое функциональное тестирование?
Функциональное тестирование – один из видов тестирования, направленного на проверку соответствий функциональных требований ПО к его реальным характеристикам. Основной
задачей функционального тестирования является подтверждение того, что разрабатываемый программный продукт обладает всем функционалом, требуемым заказчиком.
В зависимости от цели, функциональное тестирование может проводиться:

• На основе функциональных требований, указанных в спецификации требований. При этом для тестирования создаются тестовые случаи (testcases), составление которых 
учитывает приоритетность функций ПО, которые необходимо покрыть тестами. Таким образом мы можем убедиться в том, что все функции разрабатываемого продукта работают
 корректно при различных типах входных данных, их комбинаций, количества и т.д.

• На основе бизнес-процессов, которые должно обеспечить приложение. В этом случае, нас интересует не так работоспособность отдельных функций ПО, 
как корректность выполняемых операций, с точки зрения сценариев использования системы. Таким образом, тестирование в данном случае будет основываться на 
вариантах использования системы (usecases).

Описанные выше аспекты реализуются с помощью следующих видов и уровней тестирования:
• Модульное (компонентное).
• Интеграционное.
• Системное.
• Регрессионное.
• Приемочное.

29. Что такое тестирование совместимости/взаимодействия? (Compatibility/Interoperability testing)
Тестирование взаимодействия (Interoperability Testing) – это функциональное тестирование, проверяющее способность приложения 
взаимодействовать с одним и более компонентами или системами и включающее в себя тестирование совместимости (compatibility testing) и интеграционное тестирование (integration testing).
ПО с хорошими характеристиками взаимодействия может быть легко интегрировано с другими системами, не требуя каких-либо 
серьезных модификаций. В этом случае, количество изменений и время, требуемое на их выполнение, могут быть использованы для измерения возможности взаимодействия.

30. Что такое тестирование на соответствие? (Conformance/Compilance testing)
Тестирование на соответствие - элемент оценки соответствия - это тестирование или другие действия,
которые определяют, соответствует ли процесс, продукт или услуга требованиям спецификации , технический стандарт , контракт или правило .

31. Что такое нефункциональное тестирование?
Нефункциональное тестирование. Если в рамках функционального тестирования мы отвечаем на вопрос «Работает ли система?», то нефункциональное отвечает на вопрос: «Как хорошо работает система?». Нефункциональное 
тестирование направлено на проверку тех аспектов ПО, которые могут быть описаны в документации, но не относятся к конкретным функциям.
К нефункциональному тестироанию относятся:
1.Тестирование производительности (performance testing) - тестирование, чтобы определить, как быстро работает система или её часть под определённой нагрузкой;
   - Нагрузочное тестирование (load testing) – это автоматизированное тестирование, которое имитирует одновременную работу множества пользователей над приложением
   -Стрессовое тестирование (stress testing) - позволяет проверить насколько приложение (система в целом) работоспособны в условиях стресса, и также оценить способность системы к регенерации
(возвращение к нормальному состоянию после прекращения стресса). 
   -Тестирование стабильности / надежности (stability / reliability testing) – проверка работоспособности приложения при длительном (многочасовом) тестировании со средним уровнем нагрузки.
   -Тестирование объемами - оценить производительность при увеличении объемов данных в БД приложения, при этом происходит:измерение времени выполнения выбранных операций при определенных интенсивностях 
выполнения этих операций может производиться определение количества пользователей, одновременно работающих с приложением.
2. Тестирование документации (document testing) – тестирование, с которого начинается почти любой проект;
3. Тестирование установки направлено на проверку успешной инсталляции и настройки, а также обновления и удаления ПО;
4. Тестирование удобства использования (usability testing) - тестирование, показывающее степень удобства использования, обучаемости, понятности и привлекательности для пользователя разрабатываемого ПО в контексте определенных условий
5. Тестирование на отказ и восстановление (Failover and Recovery Testing) проверяет продукт с точки зрения способности противостоять и успешно восстанавливаться после сбоев,
возникших в связи с ошибками ПО, отказами оборудования или проблемами связи (например, отказ сети);
6. Конфигурационное тестирование (Configuration Testing) - 
специальный вид тестирования, направленный на проверку работы программного обеспечения при различных конфигурациях системы (заявленных платформах, поддерживаемых драйверах, 
при различных конфигурациях компьютеров);
7. Тестирование совместимости (compatibility testing) - тестирование, для проверки корректной работы продукта в определенном окружении
Окружение это:
Аппаратная платформа;
Сетевые устройства;
Периферия (принтеры, CD/DVD-приводы, веб-камеры...);
Операционная система (Unix, Windows, MacOS)
Базы данных (Oracle, MS SQL, MySQL, ...)
Системное программное обеспечение (веб-сервер, антивирус)
Браузеры (Internet Explorer, Firefox, Opera, Chrome, Safari)
8. Тестирование интернационализации (internationalization testing) - проверяет  готовность  приложения  к  работе  с разными языковвыми интерфейсами:корректно отображать шрифты,пункты меню,
возможность  сортировки, поиска, способность  приложения обрабатывать, файлы на разных языках;
9. Локализационное тестирование (localization testing) -проверяет, насколько корректно продукт адаптирован к работе на другом языке: всё ли переведено и переведено правильно,не нарушилась ли логика построения интерфейса 
и обработки данных;

32. Что вы знаете о Тестировании удобства пользования?
Юзабилити-тест – это проверка сайта на удобство работы с ним. Тестирование помогает выявить и описать проблемы в навигации сайта, в дизайне страниц и элементов интерфейса, 
текстовом и визуальном контенте, а также функционале ресурса или проработке путей пользователей.
Зачем проводить тестирование:
выяснить, почему у сайта низкие показатели важных метрик (глубина просмотров, время на сайте и т.д.);
увеличить количество конверсий (грамотно продуманный дизайн и навигация сайта может подтолкнуть пользователя совершить целевое действие);
протестировать несколько вариантов интерфейса и решить, какой из них эффективнее справляется с задачами;
исправить существующие недоработки сайта;
получить обратную связь от пользователей и найти новые инсайты для дальнейшего преобразования ресурса.
Конечная цель любого юзабилити-тестирования заключается в том, чтобы еще на стадии разработки ПО понять, смогут ли клиенты, для которых непосредственно создается веб-продукт, 
самостоятельно разобраться в предоставленном интерфейсе и как быстро они это сделают. Удобный к восприятию сайт позволяет существенным образом увеличить количество людей, 
которые станут его пользователями как временно, так и на длительный промежуток времени.

33. Отличия тестирование на удобство пользования и тестирования доступности? (Usability Vs. Accessibility testing)
Тестирование удобства использования и доступности – это два зачастую игнорируемых типа тестирования приложений.
Тестирование удобства использования относится к пользовательскому опыту и проверяет, насколько приложение легко в использовании и интуитивно понятно. 
Тестирование доступности проверяет, насколько легко пользователям с ограниченными возможностями взаимодействовать с приложением

34. Что такое тестирование интерфейса?
Графический интерфейс пользователя (Graphical user interface, GUI) –разновидность пользовательского интерфейса, в котором элементы интерфейса 
меню, кнопки, значки, списки и т. п.), представленные пользователю на дисплее, исполнены в виде графических изображений.
Проверяется в целом общий вид приложения и в отдельности формы, расположенные на странице.
Общие проверки:
1. Вид элементов при уменьшении окна браузера + появление скрола
2. Правильность написания текста + текст должен быть выровнен
3. Правильность перемещения фокуса в окне (Tab / Tab+Shift)
4. Выбранные элементы выделяются
5. Неизменяемые поля выглядят одинаково и отличаются от редактируемых
6. Желательно не использовать двойной клик
7. Проверка наличия нужных нотификейшенов
8. Унификация дизайна (цвет, шрифт, размер)
9. При необходимости должны быть тултипы
10. Если формы дублируются, то должны быть одинаковые названия

35. Что такое тестирование рабочего процесса/воркфлоу? (Workflow testing)
Техника рабочих процессов в тестировании программного обеспечения путем маршрутизации записи через каждый возможный путь. 
Эти тесты выполняются, чтобы убедиться, что каждый рабочий процесс точно отражает бизнес-процесс.
Этот вид тестирования подходит для приложений, основанных на рабочих процессах.
Понять бизнес-процесс
Разработать конкретные примеры, используя различные методы (сценарий использования, таблица решений и т. Д.).
Проверить поток с различными типами пользователей (а именно — Администратор, Обновление пользователя, Просмотр).
Выполнить положительные и отрицательные тесты.
Сравнить ожидаемые и фактические результаты и зарегистрируйте дефекты.
Исправить дефекты и разверните.

36. Что вы знаете о пользовательском приемочном тестировании? (UAT – User Acceptance testing)
Пользовательское приемочное тестирование — процесс, в ходе которого просят группу людей использовать продукт, сервис или часть софта с его полным функционалом.
Известное также как бета-тестирование, UAT служит трем основным целям:
1. Определить, работает ли продукт в реальных ситуациях так, как задумывалось при его создании.
2. Определить, были ли обозначены все доступные функции.
3. Проверить продукт на наличие багов и сбоев, которые мешают ему выполнять свои основные функции.

37. Что такое эксплуатационное приемочное тестирование? (OAT — Operational Acceptance testing)
38. Что такое инсталляционное тестирование?
39. Что вы знаете о тестировании безопасности?
40. Что такое конфигурационное тестирование?
41. Объясните, что такое тестирование N+1
42. Что вы знаете о тестировании сборки? (Build Verification Test)
43. Что такое тестирование потоков? (Thread testing)
44. Что вы знаете о мутационном тестировании? (Mutation testing)
45. В чем разница между Baseline и Benchmark testing?
46. Что такое A/B тестирование?
47. Что означает сквозное тестирование? (E2E — End–to–End)
48. В чем разница между E2E и системным тестированием?
49. Что такое параллельное тестирование? (Parallel testing)
50. Чем AdHock тестирование отличается от Исследовательского тестирования?
