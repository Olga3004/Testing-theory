1. Что подразумевается под тестовой средой?
Это комбинация аппаратной и программной среды, в которой будут выполняться тесты.
Включает в себя конфигурацию оборудования, настройки операционной системы, 
конфигурацию программного обеспечения, тестовые терминалы и другую поддержку для выполнения теста.
Это наиболее важный аспект процесса тестирования. Недоступность или неправильная настройка среды могут разрушить все усилия по тестированию.
Практически, команда тестировщиков не может начать реальную работу, не имея подходящей среды для тестирования.

2. В чем отличие build от release?
Build - это версия ПО, которую команда разработчиков передает команде тестирования для целей тестирования.
Release - это программное обеспечение, которое команда тестирования передает клиенту.
Релиз является окончательным приложением после завершения разработки и тестирования.
После тестирования сборки группа тестирования сертифицирует это ПО и доставляет его заказчику. 
Релиз основан на сборках и может иметь несколько сборок. Таким образом, это ПО доставляется заказчику после завершения этапов разработки и тестирования.
   
3. Основные фазы тестирования?
Основные фазы:
1. Анализ требований.
2. Планироание испытаний.
3. Проектирование тестов.
4. Запуск тестов.
5. Редактирование тестов.
6. Системное тестирование.
7. Приемочное тестирование.
8. Поддержка и сопроваждение.

1. Анализ требований.
- Изучение спецификации требований;
- Изучение функциональные требования;
Отвечаем:
- что нам предстоит тестировать;
- объем работы;
- нюансы.
По полученным данным составляем план тестирования.
2. Планирование испытаний.
Определяем объем испытаний и ресурсов. 
Пишем, когда мы будем выполнять намеченные действия.
3. Проектирование тестов.
Определяем:
- цель тестирования;
- специфику полученных данных;
- модули и подмодули приложения;
- архитектуру проверок ( группы чек -листов);
- архитектуру тестов (детелизацию от крупного к деталям).
Пишем тесты.
4. Запуск тестов. 
- наблюдаем за тестами в действии;
- анализируем полученные результаты.
5. Редактирование тестов.
- пересматриваем и исправляем тесты;
- оставляем тесты в актуальном состоянии;
- дополняем новыми тестами.
6. Системное тестирование.
- тестируем всю систему;
получаем сведения о качестве ПО.
7. Приемочное тестирование.
Альфа-тестирование - используем незавершенную версию продукта в, которой реализована не вся функциональность
с целью выявления ошибок в реализованных модулях и функций для их последующего устранения.
Бета-тестирование - это интенсивное использование почти законченного продукта 
фокус-группами для того, чтобы найти максимальное кол-во ошибок и устранить их перед релизом, перед тем , как он выйдет на рынок.
8. Поддержка и сопровождение.
- тестирование багов найденных в релизном продукте.
- регриссионное тестирование билда после внесенных исправлений.

4. Что такое импакт анализ?
Импакт анализ - это исследование, которое позволяет указать затронутые места в проекте при разработке новой или изменении старой функциональности, 
а также определить, насколько значительно они были затронуты.Затронутые области требуют большего внимания во время проведения регрессионного тестирования.
Импакт анализ может быть полезным в следующих случаях:
- есть изменения в требованиях;
- получен запрос на внесение изменений в продукт;
- ожидается внедрение нового модуля или функциональности в существующий продукт;
- каждый раз, когда есть изменения в существующих модулях или функциональностях продукта.

5. Критерии выбора тестов?
Классы тестов:
1. Структурные критерии используют информацию о структуре программы;
2. Функциональные критерии формулируются в описании требований к продукту.

6. Принципы тестирования?
Принцыпы тестирования:
1. Тестирование демонстрирует (только) наличие дефектов.
Тестирование может показать наличие дефектов в программе, но не доказать их отсутствие. 
Тем не менее, важно составлять тест-кейсы, которые будут находить как можно больше багов. 
Таким образом, при должном тестовом покрытии, тестирование позволяет снизить вероятность наличия дефектов
в программном обеспечении. В то же время, даже если дефекты не были найдены в процессе тестирования, 
нельзя утверждать, что их нет;
2. Исчерпывающее тестирование недостижимо.
Невозможно провести исчерпывающее тестирование, которое бы покрывало все комбинации пользовательского ввода
и состояний системы, за исключениям совсем уж примитивных случаев. Вместо этого необходимо использовать анализ
рисков и расстановку приоритетов, что позволит более эффективно распределять усилия по обеспечению качества ПО.
3. Раннее тестирование (экономит время и деньги).
Тестирование должно начинаться как можно раньше в жизненном цикле разработки программного обеспечения, 
и его усилия  должны быть сконцентрированы на определенных целях.
4. Принцип скопления дефектов.
Разные модули системы могут содержать разное количество дефектов – то есть, плотность скопления дефектов 
в разных элементах программы может отличаться. Усилия по тестированию должны распределяться пропорционально 
фактической плотности дефектов. В основном, большую часть критических дефектов находят в ограниченном количестве модулей.
Это проявление принципа Парето: 80% проблем содержатся в 20% модулей.
5. Парадокс пестицида.
Прогоняя одни и те же тесты вновь и вновь, Вы столкнетесь с тем, что они находят все меньше новых ошибок. 
Поскольку система эволюционирует, многие из ранее найденных дефектов исправляют и старые тест-кейсы больше не срабатывают.
Чтобы преодолеть этот парадокс, необходимо периодически вносить изменения в используемые наборы тестов, рецензировать 
и корректировать их с тем, чтобы они отвечали новому состоянию системы и позволяли находить как можно большее количество дефектов.
6. Тестирование зависит от контекста.
Выбор методологии, техники и типа тестирования будет напрямую зависеть от природы самой программы. 
Например, программное обеспечение для медицинских нужд требует гораздо более строгой и тщательной проверки, 
чем, скажем, компьютерная игра. Из тех же соображений, сайт с большой посещаемостью должен пройти через серьезное 
тестирование производительности, чтобы показать возможность работы в условиях высокой нагрузки.
7. Заблуждение об отсутствии ошибок.
Тот факт, что тестирование не обнаружило дефектов, еще не значит, что программа готова к релизу.
Нахождение и исправление дефектов будут не важны, если система окажется неудобной в использовании,
и не будет удовлетворять ожиданиям и потребностям пользователя.

7. Что такое независимое тестирование?
Независимое тестирование соответствует независимой команде, которая участвует в тестировании, 
отличном от разработчика, чтобы избежать предвзятости автора и часто более эффективна в поиске дефектов и сбоев.
Независимое тестирование является частью процесса разработки ПО и часто позволяет определить дефекты еще на ранней 
стадии разработки, что,дает возможность своевременно их устранить. Такой вид тестирования 
можно проводить не только в момент разработки. Можно так же тестировать готовый продукт, для того, чтобы получить 
независимую оценку его качества.


8. Что такое тестирование со сдвигом влево?
9. Почему тестирование делится на отдельные этапы?
10. Какие есть этапы тестирования?
11. Как вы тестируете продукт, если требования еще не зафиксированы?
12. Как вы узнаете, было ли создано достаточно тестов для тестирования продукта?
13. Что подразумевается под тестовыми данными? 
14. Что такое бета-тестирование?
15. Что означает пилотное тестирование? (Pilot)
16. Что такое бизнес – логика?
17. Какие существуют основные виды тестирования ПО?
18. Методы тестирования?
19. Что такое пирамида / уровни тестирования?
20. Что такое деструктивное/разрушающее/негативное тестирование? (DT — Destructive testing)
21. Что такое недеструктивное/неразрушающее/позитивное тестирование? (NDT – Non Destructive testing)
22. Что подразумевается под компонентным/модульным/юнит тестированием? (Component/Module/Unit testing)
23. Что подразумевается под интеграционным тестированием?
24. Разница между Unit testing и Integration testing?
25. Что такое системное интеграционное тестирование? (SIT — System Integration testing) 
26. В чем разница между тест-драйвером и тест-заглушкой? (Test Driver and Test Stub)
27. Что подразумевается под системным тестированием?
28. Что такое функциональное тестирование?
29. Что такое тестирование совместимости/взаимодействия? (Compatibility/Interoperability testing)
30. Что такое тестирование на соответствие? (Conformance/Compilance testing)
31. Что такое нефункциональное тестирование?
32. Что вы знаете о Тестировании удобства пользования?
33. Отличия тестирование на удобство пользования и тестирования доступности? (Usability Vs. Accessibility testing)
34. Что такое тестирование интерфейса?
35. Что такое тестирование рабочего процесса/воркфлоу? (Workflow testing)
36. Что вы знаете о пользовательском приемочном тестировании? (UAT – User Acceptance testing)
37. Что такое эксплуатационное приемочное тестирование? (OAT — Operational Acceptance testing)
38. Что такое инсталляционное тестирование?
39. Что вы знаете о тестировании безопасности?
40. Что такое конфигурационное тестирование?
41. Объясните, что такое тестирование N+1
42. Что вы знаете о тестировании сборки? (Build Verification Test)
43. Что такое тестирование потоков? (Thread testing)
44. Что вы знаете о мутационном тестировании? (Mutation testing)
45. В чем разница между Baseline и Benchmark testing?
46. Что такое A/B тестирование?
47. Что означает сквозное тестирование? (E2E — End–to–End)
48. В чем разница между E2E и системным тестированием?
49. Что такое параллельное тестирование? (Parallel testing)
50. Чем AdHock тестирование отличается от Исследовательского тестирования?
